# Pipeline consists of 4 jobs
# - Build_an_Test:
#   - Checks formatting
#   - Builds the project
#   - Runs all the tests
#   - Creates a NuGet package
# - Publish_to_MyGet:
#   - Pushes the NuGet package to MyGet
#   - Assumes a Service Connection for MyGet was set up in the Team project running the pipeline
#   - The name of the service connection is stored in the variable myget_ServiceConnectionName (defined below)
#   - Only runs when building a release branch or the master branch
# - Publish_to_NuGet_org
#   - Pushes the NuGet package to NuGet.org
#   - Assumes a Service Connection for NuGet was set up in the Team project running the pipeline
#   - The name of the service connection is stored in the variable nuget_org_ServiceConnectionName (defined below)
#   - The variable nuget_org_PackageName defines which package is produced by the pipeline
# - Create_GitHub_Release
#   - Creates a GitHub release for the build
#   - Only runs if the build was published to NuGet.org

trigger:
  - master
  - release/*

pr:
  - master
  - release/*

variables:
  # Build settings
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true    # do not populate NuGet caches on build agents (VM will be deleted afterwards anyways)
  configuration: Release                      # the configuration (Debug/Release) to build
  solutionPath : src/MdDocs.sln               # The path of the solution to be built
  artifactsName_Binaries: Binaries
  artifactsName_ChangeLog: ChangeLog

  # MyGet.org settings
  myget_ServiceConnectionName: 'MyGet - ap0llo-mddocs'      # the name of the Azure DevOps service connection to use for MyGet.org

  # NuGet.org settings
  nuget_org_ServiceConnectionName: 'NuGet.org - mddocs'     # the name of the Azure DevOps service connection to use for NuGet.org
  nuget_org_PackageName: 'Grynwald.MdDocs'                  # the name of the package being published

  # GitHub settings
  github_ServiceConnectionName: 'GitHub: ap0llo'      # the name of the Azure DevOps service connection to use for creating GitHub releases
  github_repositoryName: 'ap0llo/mddocs'              # the name of the github repo to create the release in

  # Azure DevOps agent settings
  azuredevops_vmimage: windows-latest

jobs:

# Main Build and test job: Builds the projects and runs all tests
- job: Build_and_Test
  displayName: 🛠 Build and Test
  pool:
    vmImage: $(azuredevops_vmimage)
  steps:

  - checkout: self
    submodules: true

  # Install .NET Core SDK and runtime (version specified in global.json)
  - task: UseDotNet@2
    displayName: ⚙ Install .NET Core SDK
    inputs:
      packageType: sdk
      useGlobalJson: true

  # Also install the .NET Core 3.1 SDK and the .NET 5 SDK because MSBuild integration tests run on multiple .NET SDKs
  - task: UseDotNet@2
    displayName: 'Install .NET Core 3.1 SDK'
    inputs:
      packageType: sdk
      version: 3.1.405
  - task: UseDotNet@2
    displayName: 'Install .NET 5 SDK'
    inputs:
      packageType: sdk
      version: 5.0.403

  # Restore local .NET Core tools
  - task: DotNetCoreCLI@2
    displayName: 📥 Restore local tools
    inputs:
      command: custom
      custom: tool
      arguments: restore

  # Set the build number using Nerdbank.GitVersioning
  - script: dotnet tool run nbgv cloud --all-vars
    displayName: Set Version

  # Restore, Build, Test
  - task: CmdLine@2
    displayName: 📥 Restore NuGet packages
    inputs:
      script: dotnet restore $(solutionPath) /warnaserror

  # Check the formatting using dotnet-format
  - script: dotnet format $(solutionPath) --verify-no-changes --no-restore
    displayName: 🕵️ Check code formatting
      
  - task: DotNetCoreCLI@2
    displayName: 🏗 Build
    inputs:
      command: build
      projects: $(solutionPath)
      arguments: '--configuration $(configuration) --no-restore /warnaserror'
  - task: DotNetCoreCLI@2
    displayName: 🧪 Test
    inputs:
      command: test
      projects: $(solutionPath)
      arguments: '--configuration $(configuration) --no-build --collect:"XPlat Code Coverage"'
  # The PublishCodeCoverageResults task only supports publishing a single coverage result file,
  # so the results are merged into a single cobertura file using "ReportGenerator"
  # The dotnet test task redirects test results to $(Agent.TempDirectory) so coverage reports will be written there, too
  - script: >-
      dotnet tool run reportgenerator
      -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml
      -targetdir:$(Agent.TempDirectory)/TestResults/Coverage
      -reporttypes:cobertura
    displayName: Merge Code Coverage Results
  - task: PublishCodeCoverageResults@1
    displayName: Publish Code Coverage results
    inputs:
      codeCoverageTool: cobertura
      summaryFileLocation: $(Agent.TempDirectory)/TestResults/Coverage/Cobertura.xml
      failIfCoverageEmpty: true

  # Create NuGet Package and  publish as build artifact
  - task: CmdLine@2
    displayName: 📦 Pack NuGet package
    inputs:
      script: >-
        dotnet pack $(solutionPath)
        --configuration $(configuration)
        --output $(Build.ArtifactStagingDirectory)
        --no-build
        /warnaserror
  - task: PublishBuildArtifacts@1
    displayName: '📤 Publish Artifacts: $(artifactsName_Binaries)'
    inputs:
      artifactName: $(artifactsName_Binaries)

  # Generate changelog and publish as build artifact
  - task: CmdLine@2
    displayName: 📝 Generate Change Log
    inputs:
      script: >-
        dotnet tool run changelog
        --repository $(Build.SourcesDirectory)
        --currentVersion $(NBGV_NuGetPackageVersion)
        --versionRange [$(NBGV_NuGetPackageVersion)]
        --outputpath $(Build.StagingDirectory)/changelog.md
        --template GitHubRelease
        --verbose
    env:
      CHANGELOG__INTEGRATIONS__GITHUB__ACCESSTOKEN: $(GitHub.AccessToken)

  - task: PublishBuildArtifacts@1
    displayName: '📤 Publish Artifacts: $(artifactsName_ChangeLog)'
    inputs:
      pathToPublish: $(Build.StagingDirectory)/changelog.md
      artifactName: $(artifactsName_ChangeLog)

# Job to push package to MyGet.org after build
- job: Publish_to_MyGet
  displayName: 🚚 Publish to MyGet
  pool:
    vmImage: $(azuredevops_vmimage)
  # Only run after main build job and only if the current branch is master or a release branch
  dependsOn: Build_and_Test
  condition: and(succeeded('Build_and_Test'), or(eq(variables['build.sourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/') ))
  steps:
  # Get artifacts
  - task: DownloadBuildArtifacts@0
    displayName: '📥 Download Artifacts: $(artifactsName_Binaries)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_Binaries)
      downloadPath: $(Build.ArtifactStagingDirectory)
  # Upload to MyGet.org
  - task: NuGetCommand@2
    displayName: 📤 Upload package
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: $(myget_ServiceConnectionName)

# Job to push package to NuGet.org after build (only for builds of release branches)
- job: Publish_to_NuGet_org
  displayName: 🚚 Publish to NuGet.org
  pool:
    vmImage: $(azuredevops_vmimage)
  # Only run after main build job and only if the current branch is a release branch
  dependsOn: Build_and_Test
  condition: |
    and
    (
      succeeded('Build_and_Test'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
    )
  steps:
  # Get artifacts
  - task: DownloadBuildArtifacts@0
    displayName: '📥 Download Artifacts: $(artifactsName_Binaries)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_Binaries)
      downloadPath: $(Build.ArtifactStagingDirectory)
  # Upload to NuGet.org
  - task: NuGetCommand@2
    displayName: 📤 Upload package to NuGet.org'
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: $(nuget_org_ServiceConnectionName)

# Job to create a GitHub release (only if a package was uploaded to NuGet.org)
- job: Create_GitHub_Release
  displayName: 🔖 Create GitHub Release
  pool:
    vmImage: $(azuredevops_vmimage)
  # Only run if build was successful and a package was uploaded to nuget.org
  dependsOn:
  - Build_and_Test
  - Publish_to_NuGet_org
  condition: |
    and
    (
      succeeded('Publish_to_NuGet_org'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')
    )
  steps:

  # Install .NET Core SDK and runtime (version specified in global.json)
  - task: UseDotNet@2
    displayName: ⚙ Install .NET Core SDK
    inputs:
      packageType: sdk
      useGlobalJson: true

  # Restore local .NET Core tools
  - task: DotNetCoreCLI@2
    displayName: 📥 Restore local tools
    inputs:
      command: custom
      custom: tool
      arguments: restore

  # Set the build number using Nerdbank.GitVersioning
  - script: dotnet tool run nbgv cloud --all-vars
    displayName: Set Version

  # Get artifacts
  - task: DownloadBuildArtifacts@0
    displayName: '📥 Download Artifacts: $(artifactsName_Binaries)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_Binaries)
      downloadPath: $(Build.ArtifactStagingDirectory)
  - task: DownloadBuildArtifacts@0
    displayName: '📥  Download Artifacts: $(artifactsName_ChangeLog)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_ChangeLog)
      downloadPath: $(Build.ArtifactStagingDirectory)

  # Create GitHub release
  - task: GithubRelease@0
    displayName: 🔖 Create GitHub Release
    inputs:
      gitHubConnection: $(github_ServiceConnectionName)
      repositoryName: $(github_repositoryName)
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: manual
      tag: v$(NBGV_NuGetPackageVersion)
      title: v$(NBGV_NuGetPackageVersion)
      releaseNotesSource: file
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/$(artifactsName_ChangeLog)/changelog.md
      assets: $(Build.ArtifactStagingDirectory)/$(artifactsName_Binaries)/*.nupkg
      addChangeLog: false

# Job to create a GitHub *DRAFT* release (only if a package was uploaded to myget.org)
- job: Create_GitHub_Draft_Release
  displayName: 🔖 Create GitHub DRAFT Release
  pool:
    vmImage: $(azuredevops_vmimage)
  # Only run if build was successful and a package was uploaded to nuget.org
  dependsOn:
  - Build_and_Test
  condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
  steps:

  # Install .NET Core SDK and runtime (version specified in global.json)
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      packageType: sdk
      useGlobalJson: true

  # Restore local .NET Core tools
  - task: DotNetCoreCLI@2
    displayName: Restore local tools
    inputs:
      command: custom
      custom: tool
      arguments: restore

  # Set the build number using Nerdbank.GitVersioning
  - script: dotnet tool run nbgv cloud --all-vars
    displayName: Set Version

  # Get artifacts (changelog)
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Artifacts: $(artifactsName_ChangeLog)'
    inputs:
      buildType: current
      downloadType: single
      artifactName: $(artifactsName_ChangeLog)
      downloadPath: $(Build.ArtifactStagingDirectory)

  # Create GitHub *DRAFT* release
  - task: GithubRelease@0
    displayName: Create GitHub Release
    inputs:
      gitHubConnection: $(github_ServiceConnectionName)
      repositoryName: $(github_repositoryName)
      action: 'edit'
      target: '$(Build.SourceVersion)'
      tagSource: manual
      tag: vNext
      title: v$(NBGV_NuGetPackageVersion)
      releaseNotesSource: file
      releaseNotesFile: $(Build.ArtifactStagingDirectory)/$(artifactsName_ChangeLog)/changelog.md
      addChangeLog: false
      isDraft: true
